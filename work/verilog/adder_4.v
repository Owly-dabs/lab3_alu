/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder_4 (
    input [31:0] a,
    input [31:0] b,
    input [5:0] alufn_signal,
    output reg [31:0] s,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [32-1:0] M_r_s;
  reg [32-1:0] M_r_a;
  reg [32-1:0] M_r_b;
  reg [1-1:0] M_r_ci;
  rca_12 r (
    .a(M_r_a),
    .b(M_r_b),
    .ci(M_r_ci),
    .s(M_r_s)
  );
  
  integer i;
  
  integer zout;
  
  reg [31:0] xb;
  
  always @* begin
    for (i = 1'h0; i < 6'h20; i = i + 1) begin
      xb[(i)*1+0-:1] = alufn_signal[0+0-:1] ^ b[(i)*1+0-:1];
    end
    M_r_a = a;
    M_r_b = xb;
    M_r_ci = alufn_signal[0+0-:1];
    s = M_r_s;
    zout = M_r_s[0+0-:1];
    for (i = 1'h1; i < 6'h20; i = i + 1) begin
      zout = M_r_s[(i)*1+0-:1] | zout;
    end
    z = ~zout;
    v = (a[31+0-:1] & xb[31+0-:1] & ~M_r_s[31+0-:1]) | (~a[31+0-:1] & ~xb[31+0-:1] & M_r_s[31+0-:1]);
    n = M_r_s[31+0-:1];
  end
endmodule
