/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module boolean_5 (
    input [31:0] a,
    input [31:0] b,
    input [5:0] alufn_signal,
    output reg [31:0] bool
  );
  
  
  
  wire [(6'h20+0)-1:0] M_mux_4_32_out;
  reg [(6'h20+0)-1:0] M_mux_4_32_s0;
  reg [(6'h20+0)-1:0] M_mux_4_32_s1;
  reg [(6'h20+0)*4-1:0] M_mux_4_32_in;
  
  genvar GEN_mux_4_320;
  generate
  for (GEN_mux_4_320=0;GEN_mux_4_320<6'h20;GEN_mux_4_320=GEN_mux_4_320+1) begin: mux_4_32_gen_0
    muxfour_9 mux_4_32 (
      .s0(M_mux_4_32_s0[GEN_mux_4_320*(1)+(1)-1-:(1)]),
      .s1(M_mux_4_32_s1[GEN_mux_4_320*(1)+(1)-1-:(1)]),
      .in(M_mux_4_32_in[GEN_mux_4_320*(3'h4)+(3'h4)-1-:(3'h4)]),
      .out(M_mux_4_32_out[GEN_mux_4_320*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    bool = 1'h0;
    M_mux_4_32_s0 = a;
    M_mux_4_32_s1 = b;
    M_mux_4_32_in = {6'h20{{alufn_signal[0+3-:4]}}};
    bool = M_mux_4_32_out;
  end
endmodule
