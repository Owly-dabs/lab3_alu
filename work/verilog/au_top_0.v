/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [32-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [32-1:0] M_alu_a;
  reg [32-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn_signal;
  alu_1 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn_signal(M_alu_alufn_signal),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [31:0] M_a_d, M_a_q = 1'h0;
  reg [31:0] M_b_d, M_b_q = 1'h0;
  reg [5:0] M_alufn_d, M_alufn_q = 1'h0;
  wire [(2'h3+0)-1:0] M_button_conditioner_out;
  reg [(2'h3+0)-1:0] M_button_conditioner_in;
  
  genvar GEN_button_conditioner0;
  generate
  for (GEN_button_conditioner0=0;GEN_button_conditioner0<2'h3;GEN_button_conditioner0=GEN_button_conditioner0+1) begin: button_conditioner_gen_0
    button_conditioner_3 button_conditioner (
      .clk(clk),
      .in(M_button_conditioner_in[GEN_button_conditioner0*(1)+(1)-1-:(1)]),
      .out(M_button_conditioner_out[GEN_button_conditioner0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    M_a_d = M_a_q;
    M_b_d = M_b_q;
    M_alufn_d = M_alufn_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_button_conditioner_in = io_button[0+2-:3];
    led = {3'h0, io_button};
    usb_tx = usb_rx;
    io_seg = 8'h00;
    io_sel = 4'h6;
    M_alu_a = M_a_q;
    M_alu_b = M_b_q;
    M_alu_alufn_signal = M_alufn_q;
    if (M_button_conditioner_out[0+0-:1]) begin
      M_a_d = {io_dip[16+7-:8], 8'h00, io_dip[8+7-:8], io_dip[0+7-:8]};
    end
    if (M_button_conditioner_out[1+0-:1]) begin
      M_b_d = {io_dip[16+7-:8], 8'h00, io_dip[8+7-:8], io_dip[0+7-:8]};
    end
    if (M_button_conditioner_out[2+0-:1]) begin
      M_alufn_d = io_dip[0+0+5-:6];
    end
    io_led = {{{5'h00, M_alu_z, M_alu_v, M_alu_n}}, {M_alu_out[24+7-:8]}, {M_alu_out[0+7-:8]}};
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_b_q <= 1'h0;
    end else begin
      M_b_q <= M_b_d;
    end
    
    if (rst == 1'b1) begin
      M_a_q <= 1'h0;
    end else begin
      M_a_q <= M_a_d;
    end
    
    if (rst == 1'b1) begin
      M_alufn_q <= 1'h0;
    end else begin
      M_alufn_q <= M_alufn_d;
    end
  end
  
endmodule
