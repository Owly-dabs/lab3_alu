/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_1 (
    input [31:0] a,
    input [31:0] b,
    input [5:0] alufn_signal,
    output reg [31:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [32-1:0] M_adder_s;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  adder_4 adder (
    .a(a),
    .b(b),
    .alufn_signal(alufn_signal),
    .s(M_adder_s),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  wire [32-1:0] M_boolean_bool;
  boolean_5 boolean (
    .a(a),
    .b(b),
    .alufn_signal(alufn_signal),
    .bool(M_boolean_bool)
  );
  wire [32-1:0] M_shifter_shift;
  shifter_6 shifter (
    .a(a),
    .b(b),
    .alufn_signal(alufn_signal),
    .shift(M_shifter_shift)
  );
  wire [32-1:0] M_multiplier_mul;
  multiplier_7 multiplier (
    .a(a),
    .b(b),
    .mul(M_multiplier_mul)
  );
  
  wire [32-1:0] M_compare_cmp1;
  compare_8 compare (
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n),
    .alufn_signal(alufn_signal),
    .cmp1(M_compare_cmp1)
  );
  
  wire [(6'h20+0)-1:0] M_mux_boolshiftc_out;
  reg [(6'h20+0)*4-1:0] M_mux_boolshiftc_in;
  
  genvar GEN_mux_boolshiftc0;
  generate
  for (GEN_mux_boolshiftc0=0;GEN_mux_boolshiftc0<6'h20;GEN_mux_boolshiftc0=GEN_mux_boolshiftc0+1) begin: mux_boolshiftc_gen_0
    muxfour_9 mux_boolshiftc (
      .s1(alufn_signal[5+0-:1]),
      .s0(alufn_signal[4+0-:1]),
      .in(M_mux_boolshiftc_in[GEN_mux_boolshiftc0*(3'h4)+(3'h4)-1-:(3'h4)]),
      .out(M_mux_boolshiftc_out[GEN_mux_boolshiftc0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(6'h20+0)-1:0] M_mux_alufn1_out;
  reg [(6'h20+0)*2-1:0] M_mux_alufn1_in;
  
  genvar GEN_mux_alufn10;
  generate
  for (GEN_mux_alufn10=0;GEN_mux_alufn10<6'h20;GEN_mux_alufn10=GEN_mux_alufn10+1) begin: mux_alufn1_gen_0
    mux_2_10 mux_alufn1 (
      .s0(alufn_signal[1+0-:1]),
      .in(M_mux_alufn1_in[GEN_mux_alufn10*(2'h2)+(2'h2)-1-:(2'h2)]),
      .out(M_mux_alufn1_out[GEN_mux_alufn10*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  integer i;
  
  always @* begin
    for (i = 1'h1; i < 6'h20; i = i + 1) begin
      M_mux_alufn1_in[(i)*2+0+0-:1] = M_adder_s[(i)*1+0-:1];
      M_mux_alufn1_in[(i)*2+1+0-:1] = M_multiplier_mul[(i)*1+0-:1];
      M_mux_boolshiftc_in[(i)*4+3+0-:1] = M_compare_cmp1[(i)*1+0-:1];
      M_mux_boolshiftc_in[(i)*4+2+0-:1] = M_shifter_shift[(i)*1+0-:1];
      M_mux_boolshiftc_in[(i)*4+1+0-:1] = M_boolean_bool[(i)*1+0-:1];
      M_mux_boolshiftc_in[(i)*4+0+0-:1] = M_mux_alufn1_out[(i)*1+0-:1];
    end
    out = M_mux_boolshiftc_out;
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
  end
endmodule
