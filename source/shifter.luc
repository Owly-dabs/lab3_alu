module shifter (
    input a[32],         // 32 bit integer to be right or left shifted
    input b[32],          // 5 bit integer to represent the amount to be shifted
    /*input leftRight,        // single bit to represent right or left shift. Left: 0, Right: 1 (ALUFN[0])
    input signRight,        // single bit to represent SRA                                      (ALUFN[1])*/
    input alufn_signal[6],
    output shift[32]          // 32 bit integer shifted right or left
  ) {
  leftShifter ls;
  rightShifter rs;
  
  always {
    ls.s = alufn_signal[1]; ls.numA = a; ls.numB = b[4:0];
    rs.s = alufn_signal[1]; rs.numA = a; rs.numB = b[4:0];
    shift = alufn_signal[0] == b0 ? ls.out:rs.out;        // Ternery acts as mux 2:1
  }
}